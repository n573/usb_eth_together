# Generated by CMake

if("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" LESS 2.8)
   message(FATAL_ERROR "CMake >= 2.8.0 required")
endif()
if(CMAKE_VERSION VERSION_LESS "2.8.3")
   message(FATAL_ERROR "CMake >= 2.8.3 required")
endif()
cmake_policy(PUSH)
cmake_policy(VERSION 2.8.3...3.27)
#----------------------------------------------------------------
# Generated CMake target import file.
#----------------------------------------------------------------

# Commands may need to know the format version.
set(CMAKE_IMPORT_FILE_VERSION 1)

# Protect against multiple inclusion, which would fail when already imported targets are added once more.
set(_cmake_targets_defined "")
set(_cmake_targets_not_defined "")
set(_cmake_expected_targets "")
foreach(_cmake_expected_target IN ITEMS MbedTLS::mbedcrypto MbedTLS::mbedx509 MbedTLS::mbedtls)
  list(APPEND _cmake_expected_targets "${_cmake_expected_target}")
  if(TARGET "${_cmake_expected_target}")
    list(APPEND _cmake_targets_defined "${_cmake_expected_target}")
  else()
    list(APPEND _cmake_targets_not_defined "${_cmake_expected_target}")
  endif()
endforeach()
unset(_cmake_expected_target)
if(_cmake_targets_defined STREQUAL _cmake_expected_targets)
  unset(_cmake_targets_defined)
  unset(_cmake_targets_not_defined)
  unset(_cmake_expected_targets)
  unset(CMAKE_IMPORT_FILE_VERSION)
  cmake_policy(POP)
  return()
endif()
if(NOT _cmake_targets_defined STREQUAL "")
  string(REPLACE ";" ", " _cmake_targets_defined_text "${_cmake_targets_defined}")
  string(REPLACE ";" ", " _cmake_targets_not_defined_text "${_cmake_targets_not_defined}")
  message(FATAL_ERROR "Some (but not all) targets in this export set were already defined.\nTargets Defined: ${_cmake_targets_defined_text}\nTargets not yet defined: ${_cmake_targets_not_defined_text}\n")
endif()
unset(_cmake_targets_defined)
unset(_cmake_targets_not_defined)
unset(_cmake_expected_targets)


# Create imported target MbedTLS::mbedcrypto
add_library(MbedTLS::mbedcrypto STATIC IMPORTED)

set_target_properties(MbedTLS::mbedcrypto PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "/home/ht-nc/projects/usb_eth_together/libraries/mbedtls/include/"
)

# Create imported target MbedTLS::mbedx509
add_library(MbedTLS::mbedx509 STATIC IMPORTED)

set_target_properties(MbedTLS::mbedx509 PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "/home/ht-nc/projects/usb_eth_together/libraries/mbedtls/include/"
  INTERFACE_LINK_LIBRARIES "MbedTLS::mbedcrypto"
)

# Create imported target MbedTLS::mbedtls
add_library(MbedTLS::mbedtls STATIC IMPORTED)

set_target_properties(MbedTLS::mbedtls PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "/home/ht-nc/projects/usb_eth_together/libraries/mbedtls/include/"
  INTERFACE_LINK_LIBRARIES "MbedTLS::mbedx509"
)

# Import target "MbedTLS::mbedcrypto" for configuration "Debug"
set_property(TARGET MbedTLS::mbedcrypto APPEND PROPERTY IMPORTED_CONFIGURATIONS DEBUG)
set_target_properties(MbedTLS::mbedcrypto PROPERTIES
  IMPORTED_LINK_INTERFACE_LANGUAGES_DEBUG "C"
  IMPORTED_LOCATION_DEBUG "/home/ht-nc/projects/usb_eth_together/build/libraries/mbedtls/library/libmbedcrypto.a"
  )

# Import target "MbedTLS::mbedx509" for configuration "Debug"
set_property(TARGET MbedTLS::mbedx509 APPEND PROPERTY IMPORTED_CONFIGURATIONS DEBUG)
set_target_properties(MbedTLS::mbedx509 PROPERTIES
  IMPORTED_LINK_INTERFACE_LANGUAGES_DEBUG "C"
  IMPORTED_LOCATION_DEBUG "/home/ht-nc/projects/usb_eth_together/build/libraries/mbedtls/library/libmbedx509.a"
  )

# Import target "MbedTLS::mbedtls" for configuration "Debug"
set_property(TARGET MbedTLS::mbedtls APPEND PROPERTY IMPORTED_CONFIGURATIONS DEBUG)
set_target_properties(MbedTLS::mbedtls PROPERTIES
  IMPORTED_LINK_INTERFACE_LANGUAGES_DEBUG "C"
  IMPORTED_LOCATION_DEBUG "/home/ht-nc/projects/usb_eth_together/build/libraries/mbedtls/library/libmbedtls.a"
  )

# This file does not depend on other imported targets which have
# been exported from the same project but in a separate export set.

# Commands beyond this point should not need to know the version.
set(CMAKE_IMPORT_FILE_VERSION)
cmake_policy(POP)
